/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch"
  background?: string
  foreground?: string
  population?: number
  title?: string
}

export type SanityImagePalette = {
  _type: "sanity.imagePalette"
  darkMuted?: SanityImagePaletteSwatch
  lightVibrant?: SanityImagePaletteSwatch
  darkVibrant?: SanityImagePaletteSwatch
  vibrant?: SanityImagePaletteSwatch
  dominant?: SanityImagePaletteSwatch
  lightMuted?: SanityImagePaletteSwatch
  muted?: SanityImagePaletteSwatch
}

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions"
  height?: number
  width?: number
  aspectRatio?: number
}

export type SanityFileAsset = {
  _id: string
  _type: "sanity.fileAsset"
  _createdAt: string
  _updatedAt: string
  _rev: string
  originalFilename?: string
  label?: string
  title?: string
  description?: string
  altText?: string
  sha1hash?: string
  extension?: string
  mimeType?: string
  size?: number
  assetId?: string
  uploadId?: string
  path?: string
  url?: string
  source?: SanityAssetSourceData
}

export type Geopoint = {
  _type: "geopoint"
  lat?: number
  lng?: number
  alt?: number
}

export type Testimonial = {
  _id: string
  _type: "testimonial"
  _createdAt: string
  _updatedAt: string
  _rev: string
  language?: string
  consultant?: {
    _ref: string
    _type: "reference"
    _weak?: boolean
    [internalGroqTypeReferenceTo]?: "consultant"
  }
  date?: string
  author?: {
    _ref: string
    _type: "reference"
    _weak?: boolean
    [internalGroqTypeReferenceTo]?: "human"
  }
  position?: LocaleString
  company?: {
    _ref: string
    _type: "reference"
    _weak?: boolean
    [internalGroqTypeReferenceTo]?: "company"
  }
  quoteLanguage?: "en" | "de"
  source?: "linkedin" | "xing" | "email" | "other"
  quote?: LocaleText
  slug?: Slug
}

export type Human = {
  _id: string
  _type: "human"
  _createdAt: string
  _updatedAt: string
  _rev: string
  headshot?: {
    asset?: {
      _ref: string
      _type: "reference"
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset"
    }
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    _type: "image"
  }
  name?: string
  status?: "freelancer" | "owner" | "employee"
  position?: LocaleString
  company?: {
    _ref: string
    _type: "reference"
    _weak?: boolean
    [internalGroqTypeReferenceTo]?: "company"
  }
}

export type Project = {
  _id: string
  _type: "project"
  _createdAt: string
  _updatedAt: string
  _rev: string
  consultant?: {
    _ref: string
    _type: "reference"
    _weak?: boolean
    [internalGroqTypeReferenceTo]?: "consultant"
  }
  title?: LocaleString
  role?: LocaleString
  customer?: {
    _ref: string
    _type: "reference"
    _weak?: boolean
    [internalGroqTypeReferenceTo]?: "company"
  }
  slug?: Slug
  contractStart?: string
  contractEnd?: string
  description?: LocaleText
  testimonials?: Array<{
    _ref: string
    _type: "reference"
    _weak?: boolean
    _key: string
    [internalGroqTypeReferenceTo]?: "testimonial"
  }>
}

export type Company = {
  _id: string
  _type: "company"
  _createdAt: string
  _updatedAt: string
  _rev: string
  logo?: {
    asset?: {
      _ref: string
      _type: "reference"
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset"
    }
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    _type: "image"
  }
  name?: string
  city?: LocaleString
  country?: "de" | "ch" | "at" | "lu" | "fr" | "nl" | "be" | "us" | "cn" | "ca"
  industry?:
    | "IT"
    | "Staples"
    | "Consumer"
    | "Healthcare"
    | "Financials"
    | "Industrials"
    | "Energy"
    | "Materials"
    | "Utilities"
    | "RealEstate"
    | "Telecom"
    | "Media"
    | "Retail"
    | "Transportation"
    | "Automobiles"
    | "Pharma"
    | "Insurance"
    | "CapitalGoods"
    | "Food"
    | "Chemicals"
    | "Software"
    | "Hardware"
    | "Hotels"
    | "Textiles"
    | "Household"
    | "Construction"
    | "Aerospace"
    | "Metals"
    | "Education"
  slug?: Slug
}

export type Picture = {
  _id: string
  _type: "picture"
  _createdAt: string
  _updatedAt: string
  _rev: string
  image?: {
    asset?: {
      _ref: string
      _type: "reference"
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset"
    }
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    _type: "image"
  }
  alt?: LocaleString
  date?: string
  slug?: Slug
}

export type Slug = {
  _type: "slug"
  current?: string
  source?: string
}

export type Consultant = {
  _id: string
  _type: "consultant"
  _createdAt: string
  _updatedAt: string
  _rev: string
  headshot?: {
    asset?: {
      _ref: string
      _type: "reference"
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset"
    }
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    _type: "image"
  }
  name?: string
  birthday?: string
  address?: {
    _ref: string
    _type: "reference"
    _weak?: boolean
    [internalGroqTypeReferenceTo]?: "address"
  }
}

export type SanityImageCrop = {
  _type: "sanity.imageCrop"
  top?: number
  bottom?: number
  left?: number
  right?: number
}

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot"
  x?: number
  y?: number
  height?: number
  width?: number
}

export type SanityImageAsset = {
  _id: string
  _type: "sanity.imageAsset"
  _createdAt: string
  _updatedAt: string
  _rev: string
  originalFilename?: string
  label?: string
  title?: string
  description?: string
  altText?: string
  sha1hash?: string
  extension?: string
  mimeType?: string
  size?: number
  assetId?: string
  uploadId?: string
  path?: string
  url?: string
  metadata?: SanityImageMetadata
  source?: SanityAssetSourceData
}

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData"
  name?: string
  id?: string
  url?: string
}

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata"
  location?: Geopoint
  dimensions?: SanityImageDimensions
  palette?: SanityImagePalette
  lqip?: string
  blurHash?: string
  hasAlpha?: boolean
  isOpaque?: boolean
}

export type Address = {
  _id: string
  _type: "address"
  _createdAt: string
  _updatedAt: string
  _rev: string
  name?: string
  street?: string
  houseNumber?: string
  zipCode?: number
  city?: string
  country?:
    | "Germany"
    | "Switzerland"
    | "Austria"
    | "Luxembourg"
    | "France"
    | "Netherlands"
    | "Belgium"
}

export type LocaleText = {
  _type: "localeText"
  en?: string
  de?: string
}

export type LocaleString = {
  _type: "localeString"
  en?: string
  de?: string
}

export type InternationalizedArrayTextValue = {
  _type: "internationalizedArrayTextValue"
  value?: string
}

export type InternationalizedArrayStringValue = {
  _type: "internationalizedArrayStringValue"
  value?: string
}

export type InternationalizedArrayText = Array<
  {
    _key: string
  } & InternationalizedArrayTextValue
>

export type InternationalizedArrayString = Array<
  {
    _key: string
  } & InternationalizedArrayStringValue
>

export type AllSanitySchemaTypes =
  | SanityImagePaletteSwatch
  | SanityImagePalette
  | SanityImageDimensions
  | SanityFileAsset
  | Geopoint
  | Testimonial
  | Human
  | Project
  | Company
  | Picture
  | Slug
  | Consultant
  | SanityImageCrop
  | SanityImageHotspot
  | SanityImageAsset
  | SanityAssetSourceData
  | SanityImageMetadata
  | Address
  | LocaleText
  | LocaleString
  | InternationalizedArrayTextValue
  | InternationalizedArrayStringValue
  | InternationalizedArrayText
  | InternationalizedArrayString
export declare const internalGroqTypeReferenceTo: unique symbol
// Source: ./app/routes/testimonial.$slug.tsx
// Variable: TESTIMONIAL_QUERY
// Query: *[_type == "testimonial" && slug.current == $slug][0] {    date,    language,    quote,    author->{      name,      headshot,      position,      company->{        name      }    },    position,    company->{      name    }  }
export type TESTIMONIAL_QUERYResult = {
  date: string | null
  language: string | null
  quote: LocaleText | null
  author: {
    name: string | null
    headshot: {
      asset?: {
        _ref: string
        _type: "reference"
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset"
      }
      hotspot?: SanityImageHotspot
      crop?: SanityImageCrop
      _type: "image"
    } | null
    position: LocaleString | null
    company: {
      name: string | null
    } | null
  } | null
  position: LocaleString | null
  company: {
    name: string | null
  } | null
} | null

// Source: ./app/routes/testimonials.tsx
// Variable: TESTIMONIALS_QUERY
// Query: *[_type == "testimonial" && defined(slug.current)] | order(date desc){    _id,    slug,    date,    author->{      name,      headshot,      status,      position,      company->{        name      }    },    position,    company->{      name    }  }
export type TESTIMONIALS_QUERYResult = Array<{
  _id: string
  slug: Slug | null
  date: string | null
  author: {
    name: string | null
    headshot: {
      asset?: {
        _ref: string
        _type: "reference"
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset"
      }
      hotspot?: SanityImageHotspot
      crop?: SanityImageCrop
      _type: "image"
    } | null
    status: "employee" | "freelancer" | "owner" | null
    position: LocaleString | null
    company: {
      name: string | null
    } | null
  } | null
  position: LocaleString | null
  company: {
    name: string | null
  } | null
}>

// Source: ./app/routes/werner.tsx
// Variable: PROJECTS_QUERY
// Query: *[_type == "project" && consultant->name == $name]    {      _id,      "title": title[$language],      "description": description[$language],      contractStart,      contractEnd,      consultant->{        name,      },      customer->      {        name,        "city": city[$language],        country,        industry,        logo      },      "role": role[$language],      technologies,      testimonials[]->      {        _id,        "quote": quote[$language],        "position": position[$language],        author->{          name        },        company->{          name        }      }    } | order(contractStart desc)
export type PROJECTS_QUERYResult = Array<{
  _id: string
  title: Array<{
    _type: "localeString"
    en?: string
    de?: string
  }> | null
  description: Array<{
    _type: "localeText"
    en?: string
    de?: string
  }> | null
  contractStart: string | null
  contractEnd: string | null
  consultant: {
    name: string | null
  } | null
  customer: {
    name: string | null
    city: Array<{
      _type: "localeString"
      en?: string
      de?: string
    }> | null
    country:
      | "at"
      | "be"
      | "ca"
      | "ch"
      | "cn"
      | "de"
      | "fr"
      | "lu"
      | "nl"
      | "us"
      | null
    industry:
      | "Aerospace"
      | "Automobiles"
      | "CapitalGoods"
      | "Chemicals"
      | "Construction"
      | "Consumer"
      | "Education"
      | "Energy"
      | "Financials"
      | "Food"
      | "Hardware"
      | "Healthcare"
      | "Hotels"
      | "Household"
      | "Industrials"
      | "Insurance"
      | "IT"
      | "Materials"
      | "Media"
      | "Metals"
      | "Pharma"
      | "RealEstate"
      | "Retail"
      | "Software"
      | "Staples"
      | "Telecom"
      | "Textiles"
      | "Transportation"
      | "Utilities"
      | null
    logo: {
      asset?: {
        _ref: string
        _type: "reference"
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset"
      }
      hotspot?: SanityImageHotspot
      crop?: SanityImageCrop
      _type: "image"
    } | null
  } | null
  role: Array<{
    _type: "localeString"
    en?: string
    de?: string
  }> | null
  technologies: null
  testimonials: Array<{
    _id: string
    quote: Array<{
      _type: "localeText"
      en?: string
      de?: string
    }> | null
    position: Array<{
      _type: "localeString"
      en?: string
      de?: string
    }> | null
    author: {
      name: string | null
    } | null
    company: {
      name: string | null
    } | null
  }> | null
}>

// Query TypeMap
import "@sanity/client"
declare module "@sanity/client" {
  interface SanityQueries {
    '*[_type == "testimonial" && slug.current == $slug][0] {\n    date,\n    language,\n    quote,\n    author->{\n      name,\n      headshot,\n      position,\n      company->{\n        name\n      }\n    },\n    position,\n    company->{\n      name\n    }\n  }\n': TESTIMONIAL_QUERYResult
    '*[_type == "testimonial" && defined(slug.current)] | order(date desc){\n    _id,\n    slug,\n    date,\n    author->{\n      name,\n      headshot,\n      status,\n      position,\n      company->{\n        name\n      }\n    },\n    position,\n    company->{\n      name\n    }\n  }\n': TESTIMONIALS_QUERYResult
    '\n    *[_type == "project" && consultant->name == $name]\n    {\n      _id,\n      "title": title[$language],\n      "description": description[$language],\n      contractStart,\n      contractEnd,\n      consultant->{\n        name,\n      },\n      customer->\n      {\n        name,\n        "city": city[$language],\n        country,\n        industry,\n        logo\n      },\n      "role": role[$language],\n      technologies,\n      testimonials[]->\n      {\n        _id,\n        "quote": quote[$language],\n        "position": position[$language],\n        author->{\n          name\n        },\n        company->{\n          name\n        }\n      }\n    } | order(contractStart desc)\n  ': PROJECTS_QUERYResult
  }
}
